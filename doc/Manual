Manual of Mauve Analysis
========================
Sang_Chul_Choi <goshng@yahoo.co.kr>

Copyright
---------
Copyright (C) 2011 Sang Chul Choi

This file is part of Mauve Analysis.

Mauve Analysis is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Mauve Analysis is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Mauve Analysis.  If not, see <http://www.gnu.org/licenses/>.

Preface
-------
A preface, containing details of related documents and information on how to
navigate the user guide

Introduction
------------
This manual introduces *Mauve Analysis* for analyzing closely related bacterial
genomes using ClonalOrigin. The analysis is performed with other
software packages. See the section <<Installation>> for detail for
the required software packages.
*Mauve Analysis* is a package of scripts including BASH shell scripts, PERL
scripts, and source codes in language C. Users do not need directly run those
scripts. Instead, they should execute the script +run+ at the base directory.
Note that directories are referred with respect to the base directory of 
*Mauve Analysis* package.

.To execute the main menu of *Mauve Analysis*
----
$ ./run
----
would list menus, among which users can select by typing in a number for one of 
the menus that users wish to execute.
Follow the instruction in the menu that you choose. When you
unziped *Mauve Analysis* package, you need to <<Configuration,configure>> 
an analysis and <<Installation,install>> necessary software packages. 
After the installation of helper software packages and the configuration of the
analysis, a <<species,species file>> is needed before analyzing bacterial
genomes. Impatient users can see the section <<Kickstart>> to start to analyze
their selected bacterial genomes.

Initialize the file system
~~~~~~~~~~~~~~~~~~~~~~~~~~
Execute the menu *init-file-system* after the configuration of the analysis and
the installation of the analysis. This will create +input+ and +output+ directories
in the base directory, and base directories in the cluster and X11-enabled linux
computer.  You might need a cluster of unix-like machines for running
ClonalOrigin, and might also need a linux computer to run a program with
X11 graphical interface.

Align your genomes
~~~~~~~~~~~~~~~~~~
The first step of ClonalOrigin analysis is to align bacterial genomes.
Use menu *prepare-mauve-alignment*, and *receive-mauve-alignment* for this. The
first menu creates a shell script and moves it to the cluster with the bacterial
genomes specified in the species file. When the job of bacterial genome
alignment is finished, users can use the second menu to receive the full alignment. 
A bacterial genome alignment consists of blocks of multiple alignments. Users
might want to use parts of the blocks.  Menu *filter-blocks* should be used to
remove blocks that are not large so that a core alignment is prepared.  Users
have to specify the limit of block size for this. The menu calls a program
+stripSubsetLCBs+, which is a part of ClonalOrigin package. At the end of the
menu *filter-blocks* users might want to skim the core alignment to remove
blocks with many gaps.  Remove blocks manually because
all of the downstream analyses depend on this alignment. There are no
recommendation for the choice of block size limit. 
A simulation approach can be helpful in deciding the
block size limit. I will come back to this issue in a separate section.

Infer the species tree
~~~~~~~~~~~~~~~~~~~~~~
Congratulations! You are now ready to analyze the core alignment using
ClonalOrigin and ClonalFrame developed by Xavier Didelot. Although there are other
coauthors of the package, I want to thank him for his help in my initial
analysis. Let's go back to work. Use menu *summary-core-alignment* to summarize
the core alignment for basic statistics of the core alignment: total length of
the core alignment, number of blocks, and block sizes. Use menu
*prepare-run-clonalframe* to prepare a shell
script to submit a job of ClonalFrame, and send it to the cluster along with the
core alignment. Use menu *receive-run-clonalframe* to receive the result of the
ClonalFrame job. ClonalOrigin's analysis is multi-staged MCMC, which means that
a procedure of a Bayesian stistical inference depends on its previous one.
ClonalFrame is one of the precedures, and ClonalOrigin is used twice. Users have
to make sure convergence of each step. Menu *prepare-run-clonalframe* runs
multiple executions of ClonalFrame. Users should check the convergence of those
chains by inspecting the result files of ClonalFrame runs. Use the GUI of
ClonalFrame to open the MCMC results for this.  If the convergence is
not obtained, users might increase the block size limit or change the run
options of ClonalFrame.

Infer mutation and recombination rates and recombinant tract lengths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The second MCMC procedure is done using menu *prepare-run-clonalorigin*, which
prepares a shell script to submit a job of the first stage of ClonalOrigin.
Use menu *receive-run-clonalorigin* to receive all of the result files of
the first ClonalOrigin. Users can use menu *summarize-clonalorigin1* and
*scatter-plot-parameter* to summarize the first stage of ClonalOrigin MCMC.
Menu *summarize-clonalorigin1* creates two files: +unfinished+ and +median.txt+. 
Menu *scatter-plot-parameter* creates a figure like Figure 4 of Didelot2010.
Menu *plot-number-recombination-within-blocks* can be also used to create a
figure like Figure 6 of Didelot2010.

_Do we need a menu for checking convergence of the ClonalOrigin's 1st stage?_

Infer recombinant tree
~~~~~~~~~~~~~~~~~~~~~~
The third MCMC procedure is performed using menu *prepare-run-2nd-clonalorigin*
and *receive-run-2nd-clonalorigin*. A figure like Figure 5 of Didelot2010 can be
created using three menus of *count-observed-recedge*,
*compute-prior-count-recedge*, and *compute-heatmap-recedge*. 
Menu *prepare-run-compute-heatmap-recedge* might be useful if 
menu *compute-heatmap-recedge* is slow.  

Heat map of the recombinant tree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Users can use menu *recombination-intensity1-map* to summarize recombinant edges
along the alignment blocks. This information can be combined with gene
annotations to measure how much genes are under recombination. A list of genes
can be created using menu *create-ingene*. The recombination intensity map
created by menu *recombination-intensity1-map* and the gene annotations can be
used to find gene-wise recombination intensity using menu 
*recombination-intensity1-genes*. This gene-wise intensity can be used to do
functional category analysis. _I need to find the functional category analysis
that Melissa developed._ Menu *recombination-intensity1-probability* can be use
to create figures that are similar to Figures 2 and 7 of Didelot2010. 
Functional category analysis with the result from
*recombination-intensity1-genes* and figures from 
*recombination-intensity1-probability* could be helpful in overview of genes
with high recombination. It is not obvious which genes are interesting enough to
be under high recombination. Menu *probability-recedge-gene* searches for genes
with high recombination probability with edge types.

Functional category association with recombination edges
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Menu *create-ingene* creates a file with genes. I need to find columns in the
alignment blocks that corresponds to those genes. There are two ways of mapping
genes in the alignment blocks. One is that we first find a recombination
intensity along the blocks, and find genes in the block to compute recombination
intensity of the genes. Another is that we can have a recombination intensity
on one of reference genome, and find genes in the reference genome to compute
recombination intensity. Either way should give the same result. I used the
latter approach because I thought that finding genes in blocks can be easily
done if recombination intensity is mapped on a reference genome. This
complicates the recombination intensity computation, and I would have to have
duplicates of recombination intensity map for multiple reference genomes. I will
try to use the former approach. It seems more intuitive. Then, I need to work on
menu *create-ingene* more because genes should be mapped on blocks. I need to
map each site of a gene to its corresponding site in a block. After having one
with *create-ingene* I can do something in menus
*recombination-intensity1-genes* and *recombination-intensity1-probability*.

These two should be used to list genes and locate them in blocks.
*convert-gff-ingene*
*locate-gene-in-block*

Menu *probability-recombination* may not be used. I could delete this menu.

.Some post-processing procedures follow clonal origin runs.
. recombination-intensity: A recombinant edge is classifed by its departure and
arrival species tree branches. The number of types of recombinant edges could
have been equal to the sqaure of the number of species tree branches including
the rooting edge. Let the number of species tree branches L. A nucleotide site
is affected by only a single recombinant edge type.  I can have a matrix of
size L-by-L, each element of which is a binary value that represents that the
corresponding site is affected by the recombinant edge with departure of the
row index of the element, and arrival of the column index of it. Note that
some of elements must be always 0 because their recombinant edge types are
impossible.

. recombination-intensity2: This uses the output file from
recombination-intensity menu; it must be called after the call of
recombination-intensity. The output of recombination-intensity is a series of
matrices.  Each line starts with a position number that represents a site in a
genome. The position is followed by a L*L many integers. These numbers are
elements of a matrix of size L-by-L. Numbers in the elements can be larger
than 1 because each element is the sum of binary values over the MCMC
iterations of ClonalOrigin. The number ranges from 0 to the size of
iterations. I have to divide numbers in the elements by the number of
iterations to obtain average values. I want to consider the number of
recombinant edge types that affect a site as a measure of recombination
intensity. The total number of recombination edge types that affect a
nucleotide site is just the sum of all of the elements of the matrix of size
L-by-L.

recombination-intensity3: This uses the output file from
recombination-intensity2 menu. It draws the distribution of numbers of
recombinant edge types over sites of all of the alignment blocks.
recombination-intensity.eps shows the distribution.

More literature search for studies of bacterial recombination.

convergence: This should go to a separate menu.
heatmap:
import-ratio-locus-tag: 
summary: 
recedge: 
recmap: 
traceplot: 
parse-jcvi-role: 
combine-import-ratio-jcvi-role:

Simulation studies 1
~~~~~~~~~~~~~~~~~~~~
A simulation study for checking the first stage of ClonalOrigin MCMC.

Simulation studies 2
~~~~~~~~~~~~~~~~~~~~
A simulation study for checking the second stage of ClonalOrigin MCMC.

Simulation studies 3
~~~~~~~~~~~~~~~~~~~~
A simulation study for checking the second stage of ClonalOrigin MCMC.

[[Configuration]]
Configuration
-------------
There is a directory called +conf+ at the root of *Mauve Analysis*. Users must configure
*Mauve Analysis* by editting +README.template+ and rename it as +README+. 
Users are encouraged to obtain a user ID at a cluster of computers
because multiple jobs could be run in parallel to reduce the total amount of
time. 

GENOMEDATADIR
~~~~~~~~~~~~~
Genome Data Directory -
Bacterial genomes can be downloaded into a directory. I used to download and
store them in a separate driver because total file sizes can be too large to
be stored in a local machine. 

LCB
~~~
A program called stripSubsetLCBs was found at
http://gel.ahabs.wisc.edu/mauve/snapshots. Download it by clicking _All other
programs_ of a proper Operating System.

AUI
~~~
A program called addUnalignedIntervals was found at
http://gel.ahabs.wisc.edu/mauve/snapshots. Download it by clicking _All other
programs_ of a proper Operating System.

GUI
~~~
GUI is a part of ClonalOrigin program. It has a graphical user interface.

WARGSIM
~~~~~~~
The main program of ClonalOrigin was modified for simulation purposes.


[[Installation]]
Installation
------------
Several software need to be installed.

Mauve
~~~~~
Mauve is a genome alignment software.

ClonalFrame
~~~~~~~~~~~
ClonalFrame was found 
http://www.xavierdidelot.xtreemhost.com/clonalframe.htm[here].

ClonalOrigin
~~~~~~~~~~~~
ClonalOrigin is the main program used in this analysis, and it was found
http://code.google.com/p/clonalorigin/[here].

ClonalOrigin Simulator
~~~~~~~~~~~~~~~~~~~~~~

.Steps to compile wargsim
----
cd mauve-analysis/src/clonalorigin
mkdir b
cd b
cmake ..
make
----

R packages
~~~~~~~~~~

geneplotter
^^^^^^^^^^^
Menu scatter-plot-parameter needs a geneplotter library of R package.

I found a nice way to make a scatter plot with density.
http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=139

Run the following in R to install geneplotter library.
----
source("http://bioconductor.org/biocLite.R")
biocLite("geneplotter")
----

[[Kickstart]]
Kickstart
---------
Here is a short quick start.

.A procedure to initialize *mauve-analysis*
. Configure it by editting +conf/README.template+ and renaming it +README+
. Execute the menu *init-file-system* by executing +sh/run.sh+

.A procedure to do simulation for checking parameter estimation
. Create a species file with a name starting with s at the directory of +species+
. Execute the menu *choose-simulation*
. Execute the menu *compute-block-length* if necessary 
. Execute the menu *simulate-data-clonalorigin1*
. Execute the menu *simulate-data-clonalorigin1-prepare* 
. Go to the directory at the cluster to submit jobs
. Wait for the jobs to be finished
. Execute the menu *simulate-data-clonalorigin1-receive* 
. Execute the menu *simulate-data-clonalorigin1-analyze* 

.A procedure to do simulation for checking recombinant edges
. Create a species file with a name starting with s at the directory of +species+
. Execute the menu *choose-simulation*
. Execute the menu *compute-block-length* if necessary 

.A procedure to summarize the the first stage of ClonalOrigin MCMC
. Execute the menu *receive-run-clonalorigin* 

.A procedure to compute recombination intensity of a genome
. Execute the menu *recombination-intensity1-map* 

.A procedure to compute recombination intensity1 of genes
. Execute the menu *recombination-intensity1-map* if necessary
. Execute the menu *recombination-intensity1-genes*

.A procedure to compute recombination intensity2 of genes
. Prepare the result of 2nd stage of ClonalOrigin MCMC
. Edit the species file to add 
REPETITION3-GFF,
REPETITION3-REFGENOME, and
REPETITION3-TREETOPOLOGY
. Execute the menu *convert-gff-ingene*
. Execute the menu *locate-gene-in-block*
. Execute the menu *map-tree-topology*
.. The procedure of *map-tree-topology* tends to be slow (1 day in a local
computer)

.A procedure to check the first surrogate mesure of recombination intensity
. Execute the menu *sim2-receive* 

.A procedure to draw scatter plots for the blocks of the first stage of
ClonalOrigin.
. Execute the menu *scatter-plot-parameter*
. Execute the menu *plot-number-recombination-within-blocks*

.A procedure to summarize gene tree topologies.
. Execute the menu *map-tree-topology*

.To summarize results for publication.
. Execute menu *summary-core-alignment*
. Execute menu *count-observed-recedge*
. Execute menu *compute-prior-count-recedge* and then
*compute-heatmap-recedge*
. Execute menu *summarize-clonalorigin1*
. Execute menu *scatter-plot-parameter*
. Execute menu *probability-recedge-gene*
. Execute menu *recombination-intensity1-probability*
. Execute menu *manuscript*

.To do the posterior predictive checking
. Execute menu *sim5-prepare*

.To create +ri1-refgenome4-map-2.txt+
. Execute menu 

.To create the basic in.gene file
. Execute menu *convert-gff-ingene*

.To locate genes of in.gene file in the blocks
. Execute menu *convert-gff-ingene*
. Execute menu *locate-gene-in-block*

[[species]]
Species File
------------

.A sample of species file for simulation 
----
This is a directory for a simulation study.
Thu May 12 15:58:50 EDT 2011
#
The 3 main parameters are checked with the parameter estimates from cornellf/3
analysis.
#
Repetition:10
Replicate:2
ThetaPerSite:0.080814517322956
RhoPerSite:0.0118491287894766
Delta:743.702415841584
InBlock:cornellf-3-in.block
SpeicesTree:cornellf-3.tree
Burnin:1000000
ChainLength:1000000
Thin:10000
NumberSpecies:5
Walltime:168
----

To create an in.gene file you need a GFF file

----
REPETITION3-GFF:input/Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gff
----

To create an in.gene.4.block file you need an FNA file

----
REPETITION3-FNA:input/Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.fna
----

----
REPETITION3-GENBANK:input/Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gbk
----

----
REPETITION3-REFGENOME:4
----


Menus
-----
Users can perform jobs by selecting menus by running a bash script called
sh/run.sh. 

.Executing the main bash script
----
$ bash sh/run.sh
$ ./run
----

Directory shell variables
~~~~~~~~~~~~~~~~~~~~~~~~~
Menus are implemented with a shell scripts in the directory +sh+. Variables for
directory names can useful to find input and output files for each of the menus.
+$SPECIES+ represents a particular project. Output files for a project are
stored in +output/$SPECIES+. The species output directory has directories with
numbered names. The number represents +$REPETITION+. Each repetition directory
contains subdirectories: +data+, +run-mauve+, +run-clonalorigin+,
+run-clonalframe+, and +run-analysis+. These subdirectories can be accessed
using +$DATADIR+, +$RUNMAUVE+, +$RUNCLONALORIGIN+, +$RUNCLONALFRAME+, and
+$RUNANALYSIS+, respectively. The repetition directory can be referred to using
+$NUMBERDIR+.

init-file-system
~~~~~~~~~~~~~~~~
Call this menu first. This creates input and output directories.
After checking out the source code from the repository output directories need
to be created in the local, remote cluster, remote X11 machines.

choose-species
~~~~~~~~~~~~~~
Users should call this menu before any analysis.

prepare-mauve-alignment
~~~~~~~~~~~~~~~~~~~~~~~
Go to NCBI FTP site to download bacterial genomes.  Each genome is stored in a
directory. For example, you could download one genome using the following
commands.

.How to download bacterial genomes
----
$ cd input
$ ncftp ftp://ftp.ncbi.nih.gov/genomes/Bacteria
ncftp /genomes/Bacteria > get -r Streptococcus_dysgalactiae_equisimilis_GGS_124_uid59103
ncftp /genomes/Bacteria > quit
----

Afte downloading bacterial genomes to directory +input+, you create a data species file
and a species file. The data species file specifies genome files in Genbank
format. Relative file paths should be written down in the data species file. 
Place the data species file in +data+ directory.

.An example of data species file
----
# SDE1
# SDE2
# SDD
# SPY1
# SPY2
# SEE
input/cornell_sde1/CP002215.gbk
input/Streptococcus_dysgalactiae_equisimilis_GGS_124_uid59103/NC_012891.gbk
input/cornell_sdd/sdd.gbk
input/Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gbk
input/Streptococcus_pyogenes_MGAS10750_uid58575/NC_008024.gbk
input/Streptococcus_equi_4047_uid59259/NC_012471.gbk
----

You also need to prepare a species file with the same name as the data species
file but in +species+ directory. Put the following.

.Species file needs the following lines
----
REPETITION1-MAUVE-WALLTIME:168
GBK1:input/cornell_sde1/CP002215.gbk
GBK2:input/Streptococcus_dysgalactiae_equisimilis_GGS_124_uid59103/NC_012891.gbk
GBK3:input/cornell_sdd/sdd.gbk
GBK4:input/Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gbk
GBK5:input/Streptococcus_pyogenes_MGAS10750_uid58575/NC_008024.gbk
GBK6:input/Streptococcus_equi_4047_uid59259/NC_012471.gbk
----

A job needs a wall time, which is a maximum time for running your job. The
number after REPETITION in REPETITION1-MAUVE-WALLTIME:168 is the repetition
number you want. Use the number that you entered in the question of this menu.
You can see your jobs running in the CAC cluster by using the following
commands.

.Commands to show jobs in the CAC cluster
----
$ qstat
$ showq
----

The value 168 right after REPETITION1-MAUVE-WALLTIME is the maximum hours to use
a compute node. When the job is finished, you would be notified by the email you
specified in +conf/README+ file. You can find the output in output directory:
e.g., +output/cornell6/1/run-mauve/output+.
Use menu *receive-mauve-alignment* to copy the +output+ directory to your
computer.

receive-mauve-alignment
~~~~~~~~~~~~~~~~~~~~~~~
Use this menu to get the output file that is produced by menu 
*prepare-mauve-alignment*. You need to answer two questions: species name, and
repetition number.

filter-blocks
~~~~~~~~~~~~~


As two bacterial genomes are more distantly related, they might not be alignable
globally. Parts of one of the genome could be aligned to parts of the other.
These parts may not be ordered. The first genome might have A-B-C-D-E, and the
second might have A-C-B-E-D, where A, B, C, D, and E are parts that could be
similar. These five parts are called blocks.  The genome alignment inferred by
Mauve consists of multiple blocks.  We might not use all of the alignment blocks
in the subsequent ClonalFrame and ClonalOrigin analyses because some of blocks
might have too many gaps. We remove some blocks with many gaps to have core
alignment blocks. This is somewhat iterative procedure. I often was faced with
two difficulties.  The program, stripSubsetLCBs, is a part of progressiveMauve.
Often some allignments were a little bizarre: two many gaps are still in some
alignment. Another difficulty happens in ClonalOrigin analysis.  ClonalOrigin's
runs with some alignment blocks did not finish within bearable time, say a
month. ClonalOrigin's run with some other alignment blocks were finished
relatively fast. It depends on the option of chain lengths. I consider that runs
are finished when multiple independent MCMC more or less converged. Those blocks
had to be excluded from the analysis. At the first run of this whole procedure,
I simply execute the stripSubsetLCBs to find core alignment blocks. 

I manually check the core alignment blocks to remove any weird alignments. I
then proceed to ClonalFrame and the first stage of ClonalOrigin. I find
problematic alignment blocks with which ClonalOrigin runs take too much
computing time. Then, I come back to filter-blocks to remove them. I had to be
careful in ordering of alignment blocks because when I remove any blocks that
are not the last all the preceding block numbers have to change.  Note that
run-lcb alwasys use the output of Mauve alignment. In the 2nd stage of filtering
you need to consider proper numbering. Say, in the first filtering of alignment
with many gaps you removed the 3rd among 10 alignment blocks. In the 2nd stage,
you found 6th alignment needed too long computing time. Then, you should remove
3rd and 7th, not 3rd and 6th because the 6th is actually the 7th among the first
10 alignment blocks. The 6th alignment is 6th among 9 alignment blocks that were
from the 1st stage of filtering.

summary-core-alignment
~~~~~~~~~~~~~~~~~~~~~~
The core alignment, e.g., +output/cornell6/1/data/core_alignment.xmfa+ is
summarized in a file
+output/cornellf/3/run-analysis/summary-core-alignment.txt+.

prepare-run-clonalframe
~~~~~~~~~~~~~~~~~~~~~~~

.To build compute_watterson_estimate
----
$ cd src/utils
$ mkdir b
$ cd b
$ cmake ..
$ make
----

Prepare clonalframe analysis.

receive-run-clonalframe
~~~~~~~~~~~~~~~~~~~~~~~
Provide the clonal frame replicate ID with species name.

prepare-run-clonalorigin
~~~~~~~~~~~~~~~~~~~~~~~~
Prepare the first stage of clonalorigin.

A few variables need explanation before describing the first stage of
ClonalOrigin.
CLONALFRAMEREPLICATE: multiple replicates of clonal frame are possible.
RUNID: multiple runs in each replicate of clonal frame run are available.
Choose clonal frame replicate first, and then run identifier later. This
combination represents a species tree using the core alignment blocks.
REPLICATE: multiple replicates of clonal origin are avaiable. I also need to
check the convergence before proceeding with the second stage of clonal
origin. 
I used split core alignments into blocks. I did it for estimating Watterson's
estimate. Each block was in FASTA format. I modified the perl script,
blocksplit.pl, to generate FASTA formatted files. I just use blocksplit.pl to
split the core alignments into blocks that ClonalOrigin can read in. I delete
all the core alignment blocks that were generated before, and recreate them so
that I let ClonalOrigin read its expected formatted blocks.

.A species tree is extracted from a clonal frame output file
----
output/cornell6/1/run-clonalorigin/clonaltree.nwk
----

prepare-run-2nd-clonalorigin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The species file need definitions.
. REPETITION1-CO2-WALLTIME: maximum hours of computing time.
. REPETITION1-CO2-CO1ID: three global parameters from ClonalOrigin's 1st stage
MCMC are used. This specifies which replicate of ClonalOrigin's 1st stage runs
is used to set the three parameters.
. REPETITION1-CO2-NREPLICATE: number of replicates in ClonalOrigin's 2nd stage
of MCMC.

.An example of lines needed for ClonalOrigin 2nd MCMC
----
REPETITION1-CO2-WALLTIME:336
REPETITION1-CO2-CO1ID:1
REPETITION1-CO2-BURNIN:10000000
REPETITION1-CO2-CHAINLENGTH:100000000
REPETITION1-CO2-THIN:100000
REPETITION1-CO2-NREPLICATE:2
----

The three parameter estimates must be in +median.txt+.
The tree file +clonaltree.nwk+ must exist. 
The 

.Input files
----
output/cornell6/1/run-clonalorigin/summary/1/median.txt
output/cornell6/1/run-clonalorigin/clonaltree.nwk
output/cornell6/1/data/core_alignment.xmfa.1
...
output/cornell6/1/data/core_alignment.xmfa.N
----

.Output files
----
output/cornell6/1/run-clonalorigin/run.sh
output/cornell6/1/run-clonalorigin/batch.sh
output/cornell6/1/run-clonalorigin/batchjob.sh
output/cornell6/1/run-clonalorigin/coii.jobidfile
----

receive-run-2nd-clonalorigin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Once jobs in the computing cluster are finished, select this command to receive
the results from the cluster. Choose SPECIES, REPETITION, and REPLICATE to
receive your runs from the cluster. 

recombination-count
~~~~~~~~~~~~~~~~~~~
I describe +pl/count-observed-recedge.pl+ here. 
Let's see what I want. Some of these can be deleted. I want to write something
down as my thought flows. A ClonalOrigin XML file contains _Iterations_ tags,
each of which includes more tags. Some of the tags are global parameters such as
mutation rate _theta_, recombination rate _rho_, and tract length _delta_.
Others are multiple instances of tags _recedge_. These recombinant edges are
attached to the species tree, which is described by tag _Tree_. Each
_Iterations_ tag contains a tag called _number_.  One XML file
contains recombinant trees for one block. Multiple recombinant trees from all of
the blocks could be combined into one. Because blocks are considered independent
of one another, I take n-th recombinant trees from all of the blocks to combine
them to create a new recombinant tree. In the simulation, a recombinant tree is
created for all of the blocks. We could count recombinant edges for each pair of
branches for each block to create a file of a matrix where rows are of length of the
number of iterations, and columns are of length of the square of the number of
branches in the species tree. We then sum all of the matrices over the blocks to
obtain a matrix of recombinant edge counts for the recombinant trees.
Let's have a command _obsiter_.

.Count recombinant edges across all of the blocks
----
perl pl/count-observed-recedge.pl obsiter \
  -d $RUNCLONALORIGIN/output2/${REPLICATE} \
  -n $NUMBER_BLOCK \
  $RUNANALYSIS/obsonly-recedge-$REPLICATE.txt
----



choose-simulation
~~~~~~~~~~~~~~~~~
Users have to setup simulation configuration including mostly creating
directories.

ucsc-load-genome
~~~~~~~~~~~~~~~~
I load the 6 species to a local UCSC genome browser.

extract-species-tree
~~~~~~~~~~~~~~~~~~~~
The input species file is given from the *ClonalFrame* analysis. *ClonalOrigin*
uses the species file, but indices of branches in the tree are modified by
*ClonalOrigin*. I need to use the modified species tree to interpret the output
of *ClonalOrigin*. This menu extracts the species tree from an XML file
+$RUNCLONALORIGIN/output2/$REPLICATE/core_co.phase3.xml.1+ and produces a file 
+$RUNANALYSIS/species-tree-$REPLICATE.tree+.

summarize-clonalorigin1
~~~~~~~~~~~~~~~~~~~~~~~
The first stage of _ClonalOrigin_ results in population mutation rate,
recombination rate, and average tract length. The menu uses output files from
the first stage or files with prefix of 
+$RUNCLONALORIGIN/output/$REPLICATE/core_co.phase2.xml+  
to compute the three parameters. They are saved in file
+$RUNCLONALORIGIN/summary/$REPLICATE/median.txt+. Additionally, unfinished
blocks are saved in 
+$RUNCLONALORIGIN/summary/$REPLICATE/unfinished+. 

compute-block-length
~~~~~~~~~~~~~~~~~~~~
There are two +core_alignment.xmfa+ files: one in +data+ directory and another in
+run-mauve+. The one in data directory is produced using the other in run-mauve
directory. The alignment program mauve produces +core_alignment.xmfa+, which is
filtered by deleting blocks of many gaps. The menu uses the
+core_alignment.xmfa+
in data directory to creates block lengths in a file +$RUNANALYSIS/in.block+. The
same file is copied to +data/$SPECIES-$REPETITION-in.block+.

simulate-data-clonalorigin2
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Three values of the three main parameters, and a species tree are given to
ClonalOrigin simulator, ``wargsim,'' to generate sequence data. For each
repetition a new recombinant species tree is simulated, which is then used to
generate data under Jukes-Cantor model of DNA sequence evolution.

prepare-run-clonalorigin2-simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This command is followed by ``simulate-data-clonalorigin2'' menu. 

receive-run-clonalorigin2-simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When simulations s10, s11, and s12 were finished, I fetched the results from the
computing cluster. Just select the simulation, and wait for the shell prompt.


analyze-run-clonalorigin2-simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Simulation s10 generates 100 replicates of a single block using ClonalOrigin
model where the three main parameters, recombinant edges, and species tree are
fixed. I know a set of true recombinant edges. The numbers of recombinant edges
between pairs of species branches are of my interest. I wish to check how well 
the 100 simulations can recover the true numbers of recombinant edges.

Simulation s11 generates 10 replicates of a 100-block using ClonalOrigin model.
The three main parameters, recombinant edges, and a species tree are fixed. The
numbers of recombinant edges between pairs of species branches are known. I wish
to check how well the 10 simulations can recover the true numbers of recombinant
edges.

The simulated recombinant edges are stored in:

.File of the true recombinant edges 
----
output/s11/1/data/core_alignment.xml
----

The counts of recombinant edges from simulation are stored in:

.File of counts of recombinant edges from simulation
----
output/s11/run-analysis/s11-heatmap.txt
----

The true counts of recombinant edges are stored in:

.File of true counts of recombinant edges
----
output/s11/run-analysis/s11-yes-heatmap.txt
----

.R script file for s11
----
output/s11/run-analysis/1.R
----

.R script of comparison
----
x <- read.table("s11-heatmap.txt")
y <- read.table("s11-yes-heatmap.txt")

for (i in 1:81) {
  v <- round(mean(x[,i]) - y[,i],digit=3)
  s <- mean(x[,i+81])
  supper <- round(mean(x[,i]) + 2*s,digit=3) 
  slower <- round(mean(x[,i]) - 2*s,digit=3) 
  if ( y[,i] < slower || y[,i] > supper ) { 
    print (paste(i,"not okay"))
  }     
  print (paste(sep="     ",i,round(y[,i],digit=3),round(mean(x[,i]),digit=3),v,round(s,digit=3),slower,supper))
}
----

Simulation s12 generates 10 repetitions of 10 replicates of a 71-block using
ClonalOrigin model. 
The three main parameters, recombinant edges, and a species tree were obtained
from cornellf/8. The cornellf/8 run used the minimum limit of 5,000 base pairs
for blocks. This resulted in 71 blocks. I sampled 101 recombinant trees, 10 of
which were used for the 10 repetitions. 
I wish to check how well the 100 simulations can recover the true numbers of
recombinant edges. 


scatter-plot-parameter
~~~~~~~~~~~~~~~~~~~~~~
The three plots of global parameters estimates across all of the blocks.

recombination-intensity1-map
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

File ri1-refgenome4-map-2 was used by menu *recombination-intensity1-genes*. I
could use +rimap-2.txt+ file instead. I could extract information about
recombinant edges for some genes. Once genomic positions of a gene were used
then we do not need to consider it again in having recombination intensity or
recombinant edge counts. I think that I should not use this ri1-refgenome file
any more. It is just another way of extracting recombinant edges for a certain
regions. 

I think that I need to make sure how I extract recombinant edges from the second
stage of output files of clonalorigin. What I do with the XML files includes
summarizing the three global parameters, counting recombinant edges, extracting
recombinant edges information for a certain region. 
The Perl +count-observed-recedge.pl+ counts recombinant edges and computes the
heatmap values. 
There are simply too many PERL scripts that parse XML files, which means that
there are redundant XML parsers. This is very confusing. It is hard to create a
new one.

----
I found the following main parsers.

0. pl/computeMedians.pl - This is the first file that I started to use for
summarizing clonalorigin XML files. This is for the 1st stage of ClonalOrigin
MCMC.

1. pl/scatter-plot-parameter.pl could be one for the 1st stage of ClonalOrigin
MCMC.
pl/plot-number-recombination-within-blocks.pl should be merged to this
computeMedians.pl. I do not want to change computeMedians.pl because it is a
part of the original ClonalOrigin package. Then, we may have two scripts for the
first stage of ClonalOrigin MCMC.
pl/report-clonalorigin-job.pl is a simple parser if there are any XML errors in
parsing. I'd have this in one of any main parser with a subcommand.

2. pl/count-observed-recedge.pl - This is another main XML parser. This is for
the 2nd stage of ClonalOrigin MCMC.

3. pl/recombination-intensity1-map.pl - This creates a map file, which is a basis
of recombinant edges along genomes. This is for the 2nd stage of ClonalOrigin
MCMC. A companion PERL scripts for this could read the map file to do any
down-stream analysis such as computing recombination intensity.

4. pl/splitCOXMLPerIteration.pl could be another category of taking simulated
XML files as input to create multiple XML files for blocks.
extractClonalOriginParameter9.pl and
extractClonalOriginParameter11.pl could do the same thing.

Other parsers should be either another parser or be merged to one of the three.

pl/analyze-run-clonalorigin2-simulation2.pl - This seems to be a combination of
ri1map file and getting gene's recombination intensity. But, we needed one for
simulation where it is not appropriate for having a ri1map for each simulation.

pl/listgenegff.pl - This has something to do with recombination intensity of
genes.

pl/sim3-prepare.pl - This seems to have something to do with ri simulation. The
simulation 3 needs to be considered.
----

Can I have a single XML parser file? 
1. We might want to list raw values of theta, rho, and delta from an XML file.
2. We might want to list raw values of ll, prior, theta, rho, and delta as a
trace file.
3. Two files (extractClonalOriginParameter5.pl and scatter-plot-parameter.pl)
should be combined into one. Menu script
sh/simulate-data-clonalorigin1-analyze.sh calls 
extractClonalOriginParameter5.pl.
4. The clonalorigin simulator creates a single recombinant tree for multiple
blocks. I wished to split the single recombinant tree to multiple ones for
blocks. The PERL extractClonalOriginParameter9.pl does this. This may be one
that creates clonalorigin XML files from a single XML file.
extractClonalOriginParameter11.pl and
splitCOXMLPerIteration.pl
also do this.
5. I thought that I had a PERL script that combine multiple XML files to a
single for combining multiple recombinant trees into one. I could not find it.


File ri1-refgenome4-map-2

Numbers of recombinant edges are counted for each site along a reference genome.
I had two ways of summarizing a sample of recombinant trees: one is by block-wise,
and another is by site-wise along a reference genome. I have used the former
method for most of summarizing procedure. The latter is used from time to time.
The file, ri1-refgenome4-map-2, is for the replicate 2 with the reference genome
4. Menu *recombination-intensity1-map* has some scripts that create file
+ri1-refgenome4-map-2+. 

The PERL script, pl/recombination-intensity1-map.pl, is used to create the two
kinds of files.


compute-prior-count-recedge
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compute the prior expected numbers of recombinant edges given a species tree.
The clonal origin's companion program called ``gui'' is used. 
Select your SPECIES, REPETITION, and REPLICATE to choose a proper run from which
you wish to compute the prior expected number of recombinant edges.
The program ``gui'' runs on each block. It reads in a ClonalOrigin XML output
file of the 2nd stage MCMC. For example, the following file is read in for
SPECIES=cornellf, REPETITION=8, and REPLICATE=2:

.ClonalOrigin XML file
----
output/cornellf/8/run-clonalorigin/output2/2/core_co.phase3.xml.1
----

.File of prior expected number of recombinant edges
----
output/cornellf/8/run-clonalorigin/output2/priorcount-2/1.txt
----


count-observed-recedge
~~~~~~~~~~~~~~~~~~~~~~
Only observed recombinant edges are considered. Count recombinant
edges. I need to count recombinant edges by considering times. 

.Output Files
----
output/cornellf/3/run-analysis/obsonly-recedge-1.txt
----

compute-heatmap-recedge
~~~~~~~~~~~~~~~~~~~~~~~
Observed recombinant edges and the prior expected number of recombinant edges
both are considered.
Menu compute-prior-count-recedge must be called before the call of this menu.
 
map-tree-topology
~~~~~~~~~~~~~~~~~
in.gene must be created using menu *locate-gene-in-block*.

A ClonalOrigin XML output file contains a list of recombinant trees. The number
of recombinant trees is equal to the the number of Iteration tags. A modified
program wargsim can parse a ClonalOrigin XML file with a single recombinant
tree. The ClonalOrigin XML output file with multiple recombinant trees have to
divided to multiple XML files, each of which contains a single recombinant tree.

.A ClonalOrigin XML output file: REPETITION=8, REPLICATE=2, BLOCK=1
----
output/cornellf/8/run-clonalorigin/output2/2/core_co.phase3.xml.1
----

Splitted ClonalOrigin XML files are stored in ri-directory where represents
REPLICATE.

.A ClonalOrigin XML output file with a single recombinant tree: REPETITION=8,
REPLICATE=2, BLOCK=1, ITERATION=1
----
output/cornellf/8/run-clonalorigin/output2/ri-2/core_co.phase3.xml.1.1
----

To each splitted ClonalOrigin XML file is wargsim applied. Each output file is
saved in ri-#-out directory where represents REPLICATE.

.A gene tree topology file from a single recombinant tree: REPETITION=8,
REPLICATE=2, BLOCK=1, ITERATION=1
----
output/cornellf/8/run-clonalorigin/output2/ri-2-out/core_co.phase3.xml.1.1
----

Some of recombinant trees may not be processible by wargsim, or wargsim can
crash when parsing a ClonalOrigin XML file. I check if the number of tree
topology indices and the size of a block are equal. If they are not equal, they
should be removed in further analysis.

Conceptually divided posterior samples should be recombined. 

.A posterior sample of gene tree topology: REPETITION=8,
REPLICATE=2, BLOCK=1
----
output/cornellf/8/run-clonalorigin/output2/ri-2-combined/1
----

Gene 

.An ingene file is appended
----
output/cornellf/8/run-analysis/in.gene
----




SIMULATION3
~~~~~~~~~~~

Recombination intensity based on the average number of recombinant edge types
per site is tested.

analyze-run-clonalorigin2-simulation2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Using a local computer with a single CPU I can analyze the result of menu
simulate-data-clonalorigin2. 

analyze-run-clonalorigin2-simulation2-prepare
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A number of simulation replicates are analyzed by using a cluster.

convert-gff-ingene
~~~~~~~~~~~~~~~~~~
I use a gene annotation file that accompanies the genbank bacterial genome file.
NCBI's ftp directory called bacteria contains complete genomes of bacteria and
archaea. A genbank file could be used to locate genes in the genome of the
genbank file. I instead use a companion file called gff file to extract gene
locations. An example of 

.A genome annotation gff file
----
Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gff
----

Gene locations are stored an ingene file. The file has four columns that are
delimited by a tab: gene name, start position, end position, and gene strand.
An ingene file is created in run-analysis of a repetition directory.

.An ingene file
----
output/cornellf/3/run-analysis/in.gene
----

This needs to be placed in the species file
----
REPETITION3-GFF:Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gff
----


locate-gene-in-block
~~~~~~~~~~~~~~~~~~~~
Genes in an +ingene+ file are mapped to block alignments that are used
in ClonalOrigin inference. The following information is written to
+ingene.referenceGenomeID.block+ file:
gene start end strand blockidGene blockStart blockEnd geneStartInBlock
geneEndInBlock lenSeq gap. Genes with larger than 50 are considered. 

.An ingene block file is created.
----
output/cornellf/3/run-analysis/in.gene.4.block
----

We need a script to take
in.gene.4.block file and another file of the subset of genes to create an
in.gene block file for the subset.
---
output/cornellf/3/run-analysis/in.virulence.gene.4.block
output/cornellf/3/run-analysis/in.nonvirulence.gene.4.block
----


clonalorigin2-simulation3
~~~~~~~~~~~~~~~~~~~~~~~~~
I wish to check how map of tree topology can be helpful. 

I can still use the previous
simulation, or s10, s11, and s13. I assume that a gene is 1,000 base pairs
long. I compute recombination intensity for regions of 1,000 base pairs long.
For simulation s10 and s11 I would have 10 regions of 1,000 base pairs long
for a block. For s13 I would use genes from the real data, or genes of M3
strains. I might have to use the cluster because the computation of
recombination intensity appears slow.

clonalorigin2-simulation3-prepare
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The simulation for map-tree-topology is done in a cluster.

clonalorigin2-simulation3-each-block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Menu clonalorigin2-simulation3-prepare,
clonalorigin2-simulation3-receive, and 
clonalorigin2-simulation3-analyze may not be successful in analyzing a sequence
alignment. Local genes trees from the sample using ClonalOrigin may be invalid.
Among numerous simulations there are several cases of block alignments where
this happens. In this case I have redo the simulation for those blocks. I need
SPECIES, REPETITION, REPLICATE, BLOCK, and BLOCKSIZE. After this correction, I
can proceed with clonalorigin2-simulation3-analyze.

recombination-intensity1-map
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For simplicity, I create a file called +$RUNANALYSIS/rimap-$REPLICATE.txt+ where
the number of lines is equal to the total length of all of the block alignments.
This file could be huge in size. The file of block sizes and the XMFA alignment
file should be used to find a corresponding block of recombination events counts
for a reference genome. The species tree 
+$RUNANALYSIS/species-tree-$REPLICATE.tree+ should be used to find which
branches correspond to which element in the +rimap+ file. 

Given this +rimap+ file I could create recombination intensity or average number
of recombinant edges along a reference genome. However, 
it appears that menu *recombination-intensity1-map* features recombination event
counts along a reference genome.

recombination-intensity1-genes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The number of recombinant edges per site is computed for all of the genes of a
reference genome. recombination-intensity1-map must be called before the call of
this menu.

A PERL script +ri-virulence.pl+ is called in this menu. 

list-gene-go
~~~~~~~~~~~~
Melissa provided a file of gene ontology terms and their descriptions,
SpyMGAS315_go_category_names.txt,
and a file of gene names and their association with multiple gene ontology
terms,
SpyMGAS315_go_bacteria.txt. Using these files we list genes and their product
names for a given gene ontology term.

probability-recedge-gene
~~~~~~~~~~~~~~~~~~~~~~~~
Posterior probability of recombination is computed for each gene and each
recombinant edge type.
A table of genes with high recombinantion is created. I could select only virulence
genes. 

Files
-----

sh/run.sh
~~~~~~~~~
This is the key run file to analyze bacterial genome data sets using
ClonalOrigin. A menu is displayed so that a user can choose an operation that
she or he wants to execute. Some commands do their job on their own right, and
others require users to go to a cluster to submit a job. Each menu is executed
by its corresponding bash function. Locate the bash function to see
what it does. 

Menus:
  - choose-species: makes file system for a species, and make it ready to run
  mauve.
  - receive-run-mauve: gets the result of mauve alignment from the cluster
  - prepare-run-clonalframe: finds blocks and makes a script to run
  clonalframe.
  - compute-watterson-estimate-for-clonalframe: (optional)
  - receive-run-clonalframe: receives the result of clonal frame analysis.
  - prepare-run-clonalorigin: makes a script for clonal origin analysis.
  - receive-run-clonalorigin: receives the result of the first stage of clonal
  origin analysis. 
  - receive-run-2nd-clonalorigin: receives the result of the second stage of
  clonal analysis.

in.gene
~~~~~~~
Menu *convert-gff-ingene* creates a list of genes from a GFF file.
REPETITION3-GFF variable must be specified in a species file.

in.gene.4.block
~~~~~~~~~~~~~~~
Menu *locate-gene-in-block* creates this file using +in.gene+ file. 

rimap-1.txt
~~~~~~~~~~~
File +$RUNANALYSIS/rimap-1.txt+ is created using menu *recombination-intensity1-map*.
Directory +$RUNANALYSIS/rimap-1+ must have been created from the +rimap-1.txt+
using block lengths.
I do not know how this was done.

Perl Scripts
------------

.How to find the sample size in a ClonalOrigin XML file?
----
my $clonaloriginsamplesize = get_sample_size ($xml);
----

probability-recedge-gene.pl
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Thi is used to create the table of genes that experience high recombinant edges.
The LaTeX table is crearted using this PERL script.

virulence.pl
~~~~~~~~~~~~
Command subset: creates a list of genes from
+output/virulence/virulent_genes.txt+.
See menu *locate-gene-in-block* for the PERL script usage.

Prerequisites
-------------
. You need a user ID in a linux cluster: edit $CACUSERNAME, and $CACLOGIN.
. You need a user ID in a linux machine with X Window: edit $X11USERNAME,
and $X11LOGIN.
. Create a directory in the linux cluster, and put the name in $CACBASE: edit
$CACBASE.
. Create a directory in the linux machine with X Window, and put the name
X11BASE: edit $X11BASE.
. Prepare automatic ssh login for the two machines.
. Edit BATCHEMAIL to your email address to which you will be notified fo jobs
status.
. Edit BATCHACCESS to your access queue. Note that should different cluster batch
system be used you have to change much part of this script.
. Download unix version of progressiveMauve and install it in the cluster:
edit BATCHPROGRESSIVEMAUVE. In the example, I installed it usr/bin of my home
directory of my cluster account. The BATCHPROGRESSIVEMAUVE looks like this:
BATCHPROGRESSIVEMAUVE=usr/bin/progressiveMauve
. Install stripSubsetLCBs at $HOME/usr/bin/stripSubsetLCBs of the local
computer. It must be a part of progressiveMauve.
. Download unix version of ClonalFrame and install it into the cluster:
edit BATCHCLONALFRAME. In the example, I installed it usr/bin of my home
directory of my cluster account. The BATCHCLONALFRAME looks like this:
BATCHCLONALFRAME=usr/bin/ClonalFrame

User Manual
-----------
You should be able to download the source code from codaset repository called
mauve-analysis. 
#
.To pull the source code 
----
$ git clone git@codaset.com:goshng/mauve-analysis.git
$ cd mauve-analysis
----
#
.Execution of menus for simulation study s1
----
init-file-system
choose-simulation
simulate-data
prepare-run-clonalorigin
simulate-data-clonalorigin1-receive
----

Menu: init-file-system
~~~~~~~~~~~~~~~~~~~~~
Choose the menu for the first time only.

Menu: choose-simulation
~~~~~~~~~~~~~~~~~~~~~~~
This must be executed before selecting simulate-data.

Menu: simulate-data
~~~~~~~~~~~~~~~~~~~
The directory src/clonalorigin contains the source code of ClonalOrigin that
was modified. Compile it before simulating data. Refer to README in the
directory to build it.

The output directory
~~~~~~~~~~~~~~~~~~~~
Use the menu init-file-system to create output 

Replicates and repetitions.
---------------------------
The output directory contains different analyses. They can be different in
their raw data or their purposes of analyses. For example, the output
directory can contain cornell5 for the 5 genomes of Streptococcus. It can
contain bacillus for the genomes that Didelot et al. (2010) used. It can also
contain a directory called s1 that includes analyses of one of simulation
studies. REPETITION macro is mainly used for the purpose of simulation
studies. A number of repetitons in a simulation study can performed. One
repetition can be different from another. For real data analyses repetitions
can be done at different time points. They can also be different in some of
their filtering steps, which could result in different temporary data.

In simulation for second stage of Clonal Origin a clonal frame and recombinant
edges are fixed to generate a number of DNA sequence alignments. A number of
replicates are generated with a given clonal frame and its recombinant edges
fixed. A number of repetitions are performed and each repetition would have
a different set of recombinant edges. I am not sure what this kind of two
levels of repeated experiments can do for me. I could generate data with a
clonal frame with its recombinant edges where a set of recombinant edges can
come from one iteration of ClonalOrigin output.


README
analyze-run-clonalorigin2-simulation2-analyze.pl
analyze-run-clonalorigin2-simulation2-prepare.pl
analyze-run-clonalorigin2-simulation2.pl
blocksplit.pl
blocksplit2fasta.pl
blocksplit2smallerfasta.pl
cac.pl
combine-import-ratio-jcvi-role.pl
compute-block-length.pl
compute-heatmap-recedge.pl
computeMedians.pl
convert-gff-ingene.pl
core2smallercore.pl
create-ingene.pl
extract-species-tree.pl
extractClonalOriginParameter.pl
extractClonalOriginParameter10.pl
extractClonalOriginParameter11.pl
extractClonalOriginParameter12.pl
extractClonalOriginParameter2.pl
extractClonalOriginParameter3.pl
extractClonalOriginParameter4.pl
extractClonalOriginParameter5.pl
extractClonalOriginParameter8.pl
extractClonalOriginParameter9.pl
findBlocksWithInsufficientConvergence.pl
get-block-length.pl
get-primary-jcvi-loci.pl
getClonalTree.pl
list-gene-go.pl
list-locus-tag-go-jcvi-role.pl
listgenegff.pl
locate-gene-in-block.pl
makeMauveWargFile.pl
map-tree-topology.pl
parse-jcvi-role.pl
parse-m3-locus.pl
plot-import-ratio-jcvi-role.pl
plot-number-recombination-within-blocks.pl
probability-recedge-gene.pl
probability-recombination.pl
recombination-intensity.pl
recombination-intensity1-genes.pl
recombination-intensity1-probability.pl
recombination-intensity2.pl
recombination-intensity4.pl
recombinationmap.pl
remove-blocks-from-core-alignment.pl
report-clonalorigin-job.pl
scatter-plot-parameter.pl
sim4-analyze.pl
sim4-prepare.pl
simulate-data-clonalorigin1-analyze.pl
sort.pl
splitCOXMLPerIteration.pl
sub-array.pl
sub-error.pl
sub-heatmap.pl
sub-ingene.pl
sub-newick-parser.pl
sub-simple-parser.pl
sub-xmfa.pl
summary-core-alignment.pl
test-sub-array.pl
test-sub-simple-parser.pl


README
analyze-run-clonalorigin2-simulation2.sh
choose-simulation.sh
clonalorigin2-simulation3.sh
compute-block-length.sh
compute-global-median.sh
compute-heatmap-recedge.sh
conf.sh
convert-gff-ingene.sh
copy-mauve-alignment.sh
copy-run-sh.sh
create-ingene.sh
divide-simulated-xmfa-data.sh
divide-simulated-xml-data.sh
extract-species-tree.sh
heatmap-compute.sh
heatmap-get-observed.sh
hms.sh
init-file-system.sh
list-gene-go.sh
locate-gene-in-block.sh
manuscript.sh
map-tree-topology.sh
mkdir-species.sh
noweb.sh
plot-number-recombination-within-blocks.sh
prepare-run-2nd-clonalorigin.sh
prepare-run-compute-heatmap-recedge.sh
probability-recedge-gene.sh
probability-recombination.sh
progressbar.sh
read-species-file.sh
read-species.sh
receive-run-2nd-clonalorigin.sh
receive-run-clonalorigin.sh
recombination-intensity1-genes.sh
recombination-intensity1-probability.sh
reverse-blockid-xml.sh
run.sh
scatter-plot-parameter.sh
set-more-global-variable.sh
sim2-analyze.sh
sim3-analyze.sh
sim3-prepare.sh
sim3-receive.sh
sim4-analyze.sh
sim4-each-block.sh
sim4-prepare.sh
sim4-receive.sh
simulate-data-clonalorigin1-analyze.sh
simulate-data-clonalorigin1-prepare.sh
simulate-data-clonalorigin1-receive.sh
simulate-data-clonalorigin1.sh
simulate-data-clonalorigin2-from-xml.sh
simulate-data-clonalorigin2-prepare.sh
simulate-data-clonalorigin2.sh
summarize-clonalorigin1.sh
summary-core-alignment.sh
test-progress.sh
utility.sh
weighted-median-rscript.sh



Terms
-----
block: a multiple alignment.

Manual or user guide
--------------------
A cover page
A title page and copyright page
A preface, containing details of related documents and information on how to
navigate the user guide
A contents page
A guide on how to use at least the main functions of the system
A troubleshooting section detailing possible errors or problems that may occur,
along with how to fix them
A FAQ (Frequently Asked Questions)
Where to find further help, and contact details
A glossary and, for larger documents, an index
