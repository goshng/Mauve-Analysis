Manual of Mauve Analysis
========================
Sang_Chul_Choi <goshng@yahoo.co.kr>

Introduction
------------
This manual introduces a how-to of *Mauve Analysis* of closely related bacterial
genomes using ClonalOrigin. The analysis can be performed with help of other
software packages. See the section <<Installation>> for details. 
*Mauve Analysis* is a package of scripts including BASH shell scripts, PERL
scripts, and sometimes in C. Users are not supposed to directly run those
scripts. Instead, they should execute the script +run+ at the base directory.
Note that directories are referred with respect to the base directory of 
*Mauve Analysis* package. 

.Executing the main menu
----
$ ./run
----
It shows a list of menus, among which users can select by typing in the number
of a menu. Follow the instruction in each menu to execute the menu. When you
unziped *Mauve Analysis* package, you need to <<Configuration,configure>> 
the analysis and <<Installation,install>> other necessary software packages. 
After the installation of helper software packages and the configuration of the
analysis, a <<species,species file>> is needed to start to analyze bacterial
genomes. Impatient users can see the section <<Kickstart>> to start to analyze
their selected bacterial genomes.

Execute the menu *init-file-system* after the configuration of the analysis and
the installation of the analysis were done. This will create +output+ directory
in the base directory, and base directories in the cluster and X11-enabled linux
machine. The first step of ClonalOrigin analysis is to align bacterial genomes.
Use menu *prepare-mauve-alignment*, and *receive-mauve-alignment* for this. The
first menu creates a shell script and moves it to the cluster with the bacterial
genomes specified in the species file. When the job of bacterial genome
alignment is finished, users can use the second menu to receive the full alignment. 
A bacterial genome alignment consists of blocks of multiple alignments. Users
might want to use parts of the blocks.  Menu *filter-blocks* should be used to
remove blocks that are not large so that a core alignment is prepared.  Users
have to specify the limit of block size for this. The menu calls a program
+stripSubsetLCBs+, which is a part of ClonalOrigin package. At the end of the
menu *filter-blocks* users might want to skim the core alignment to remove
blocks with many gaps.  Users are recommended to remove blocks manually because
all of the downstream analyses depend on this alignment. There are no
recommendation for the choice of block size limit to filter the full alignment
to have a core alignment. A simulation approach can be helpful in deciding the
block size limit. I will come back to this issue in a separate section.

Congratulations! You are now ready to analyze the core alignment using
ClonalOrigin and ClonalFrame developed by Xavier Didelot. Although there are other
coauthors of the package, I want to thank him for his help in my initial
analysis. Let's go back to work. Use menu *summary-core-alignment* to summarize
the core alignment for basic statistics of the core alignment: total length of
the core alignment, number of blocks, and block sizes. Use menu
*prepare-run-clonalframe* to prepare a shell
script to submit a job of ClonalFrame, and send it to the cluster along with the
core alignment. Use menu *receive-run-clonalframe* to receive the result of the
ClonalFrame job. ClonalOrigin's analysis is multi-staged MCMC, which means that
a procedure of a Bayesian stistical inference depends on its previous one.
ClonalFrame is one of the precedures, and ClonalOrigin is used twice. Users have
to make sure convergence of each step. Menu *prepare-run-clonalframe* runs
multiple executions of ClonalFrame. Users should check the convergence of those
chains by inspecting the result files of ClonalFrame runs. If the convergence is
not obtained, users might increase the block size limit or change the run
options of ClonalFrame.

The second MCMC procedure is done using menu *prepare-run-clonalorigin*, which
prepares a shell script to submit a job of the first stage of ClonalOrigin.
Users use menu *receive-run-clonalorigin* to receive all of the result files of
the first ClonalOrigin. 


summarize-clonalorigin1

prepare-run-2nd-clonalorigin
receive-run-2nd-clonalorigin






[[Configuration]]
Configuration
-------------
A directory at the root of mauve-analysis is called +conf+. Users must configure
mauve-analysis by editting +README.template+ and rename it as +README+. 
Users are strongly encouraged to obtain a user ID at a cluster of computers
because multiple jobs could be run in parallel to reduce the total amount of
time. 

.A sample configuration file
----
PROJECTNAME:projectName
CAC_USERNAME:clusterUserID
CAC_LOGIN:clusterAddress
CAC_ROOT:clusterAnalysisDirectory
X11_USERNAME:linuxUserID
X11_LOGIN:linuxAddress
X11_ROOT:linuxAnalysisDirectory
BATCHEMAIL:yourEmailAddress
BATCHACCESS:batchAccessID
QUEUENAME:batchQueue
BATCHPROGRESSIVEMAUVE:usr/bin/progressiveMauve
BATCHCLONALFRAME:usr/bin/ClonalFrame
COREALIGNMENT:core_alignment.xmfa
GENOMEDATADIR:/Volumes/Elements/Documents/Projects/mauve/bacteria
LCB:/Users/localUserID/usr/bin/stripSubsetLCBs
AUI:/Users/localUserID/usr/bin/addUnalignedIntervals
GUI:/Users/localUserID/clonalorigin/gui/gui.app/Contents/MacOS/gui
WARGSIM:src/clonalorigin/b/wargsim
----

GENOMEDATADIR
~~~~~~~~~~~~~
Genome Data Directory -
Bacterial genomes can be downloaded into a directory. I used to download and
store them in a separate driver because total file sizes can be too large to
be stored in a local machine. 

LCB
~~~
A program called stripSubsetLCBs was found at
http://gel.ahabs.wisc.edu/mauve/snapshots. Download it by clicking _All other
programs_ of a proper Operating System.

AUI
~~~
A program called addUnalignedIntervals was found at
http://gel.ahabs.wisc.edu/mauve/snapshots. Download it by clicking _All other
programs_ of a proper Operating System.

GUI
~~~
GUI is a part of ClonalOrigin program. It has a graphical user interface.

WARGSIM
~~~~~~~
The main program of ClonalOrigin was modified for simulation purposes.


[[Installation]]
Installation
------------
Several software need to be installed.

Mauve
~~~~~
Mauve is a genome alignment software.

ClonalFrame
~~~~~~~~~~~
ClonalFrame was found 
http://www.xavierdidelot.xtreemhost.com/clonalframe.htm[here].

ClonalOrigin
~~~~~~~~~~~~
ClonalOrigin is the main program used in this analysis, and it was found
http://code.google.com/p/clonalorigin/[here].

ClonalOrigin Simulator
~~~~~~~~~~~~~~~~~~~~~~

.Steps to compile wargsim
----
cd mauve-analysis/src/clonalorigin
mkdir b
cd b
cmake ..
make
----

R packages
~~~~~~~~~~

geneplotter
^^^^^^^^^^^
Menu scatter-plot-parameter needs a geneplotter library of R package.

I found a nice way to make a scatter plot with density.
http://addictedtor.free.fr/graphiques/RGraphGallery.php?graph=139

Run the following in R to install geneplotter library.
----
source("http://bioconductor.org/biocLite.R")
biocLite("geneplotter")
----

[[Kickstart]]
Kickstart
---------
Here is a short quick start.

.A procedure to initialize *mauve-analysis*
. Configure it by editting +conf/README.template+ and renaming it +README+
. Execute the menu *init-file-system* by executing +sh/run.sh+

.A procedure to do simulation for checking parameter estimation
. Create a species file with a name starting with s at the directory of +species+
. Execute the menu *choose-simulation*
. Execute the menu *compute-block-length* if necessary 
. Execute the menu *simulate-data-clonalorigin1*
. Execute the menu *simulate-data-clonalorigin1-prepare* 
. Go to the directory at the cluster to submit jobs
. Wait for the jobs to be finished
. Execute the menu *simulate-data-clonalorigin1-receive* 
. Execute the menu *simulate-data-clonalorigin1-analyze* 

.A procedure to do simulation for checking recombinant edges
. Create a species file with a name starting with s at the directory of +species+
. Execute the menu *choose-simulation*
. Execute the menu *compute-block-length* if necessary 

.A procedure to summarize the the first stage of ClonalOrigin MCMC
. Execute the menu *receive-run-clonalorigin* 

.A procedure to compute recombination intensity of a genome
. Execute the menu *recombination-intensity1-map* 

.A procedure to compute recombination intensity1 of genes
. Execute the menu *recombination-intensity1-map* if necessary
. Execute the menu *recombination-intensity1-genes*

.A procedure to compute recombination intensity2 of genes
. Prepare the result of 2nd stage of ClonalOrigin MCMC
. Edit the species file to add 
REPETITION3-GFF,
REPETITION3-REFGENOME, and
REPETITION3-TREETOPOLOGY
. Execute the menu *convert-gff-ingene*
. Execute the menu *locate-gene-in-block*
. Execute the menu *map-tree-topology*
.. The procedure of *map-tree-topology* tends to be slow (1 day in a local
computer)

.A procedure to check the first surrogate mesure of recombination intensity
. Execute the menu *sim2-receive* 

.A procedure to draw scatter plots for the blocks of the first stage of
ClonalOrigin.
. Execute the menu *scatter-plot-parameter*
. Execute the menu *plot-number-recombination-within-blocks*

.A procedure to summarize gene tree topologies.
. Execute the menu *map-tree-topology*

.To summarize results for publication.
. Execute menu *summary-core-alignment*
. Execute menu *count-observed-recedge*
. Execute menu *compute-prior-count-recedge* and then
*compute-heatmap-recedge*
. Execute menu *summarize-clonalorigin1*
. Execute menu *scatter-plot-parameter*
. Execute menu *probability-recedge-gene*
. Execute menu *recombination-intensity1-probability*
. Execute menu *manuscript*

[[species]]
Species File
------------

.A sample of species file for simulation 
----
# This is a directory for a simulation study.
# -------------------------------------------
# Thu May 12 15:58:50 EDT 2011
#
# The 3 main parameters are checked with the parameter estimates from cornellf/3
# analysis.
#
# Repetition:10
# Replicate:2
# ThetaPerSite:0.080814517322956
# RhoPerSite:0.0118491287894766
# Delta:743.702415841584
# InBlock:cornellf-3-in.block
# SpeicesTree:cornellf-3.tree
# Burnin:1000000
# ChainLength:1000000
# Thin:10000
# NumberSpecies:5
# Walltime:168
----

.Executing the main run.sh
----
$ bash sh/run.sh
----


Menus
-----
Users can perform jobs by selecting menus by running a bash script called
sh/run.sh. 
.Executing the main bash script
----
bash sh/run.sh
----

choose-simulation
~~~~~~~~~~~~~~~~~
Users have to setup simulation configuration including mostly creating
directories.

simulate-data-clonalorigin2
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Three values of the three main parameters, and a species tree are given to
ClonalOrigin simulator, ``wargsim,'' to generate sequence data. For each
repetition a new recombinant species tree is simulated, which is then used to
generate data under Jukes-Cantor model of DNA sequence evolution.

prepare-run-clonalorigin2-simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This command is followed by ``simulate-data-clonalorigin2'' menu. 

receive-run-clonalorigin2-simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
When simulations s10, s11, and s12 were finished, I fetched the results from the
computing cluster. Just select the simulation, and wait for the shell prompt.


analyze-run-clonalorigin2-simulation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Simulation s10 generates 100 replicates of a single block using ClonalOrigin
model where the three main parameters, recombinant edges, and species tree are
fixed. I know a set of true recombinant edges. The numbers of recombinant edges
between pairs of species branches are of my interest. I wish to check how well 
the 100 simulations can recover the true numbers of recombinant edges.

Simulation s11 generates 10 replicates of a 100-block using ClonalOrigin model.
The three main parameters, recombinant edges, and a species tree are fixed. The
numbers of recombinant edges between pairs of species branches are known. I wish
to check how well the 10 simulations can recover the true numbers of recombinant
edges.

The simulated recombinant edges are stored in:

.File of the true recombinant edges 
----
output/s11/1/data/core_alignment.xml
----

The counts of recombinant edges from simulation are stored in:

.File of counts of recombinant edges from simulation
----
output/s11/run-analysis/s11-heatmap.txt
----

The true counts of recombinant edges are stored in:

.File of true counts of recombinant edges
----
output/s11/run-analysis/s11-yes-heatmap.txt
----

.R script file for s11
----
output/s11/run-analysis/1.R
----

.R script of comparison
----
x <- read.table("s11-heatmap.txt")
y <- read.table("s11-yes-heatmap.txt")

for (i in 1:81) {
  v <- round(mean(x[,i]) - y[,i],digit=3)
  s <- mean(x[,i+81])
  supper <- round(mean(x[,i]) + 2*s,digit=3) 
  slower <- round(mean(x[,i]) - 2*s,digit=3) 
  if ( y[,i] < slower || y[,i] > supper ) { 
    print (paste(i,"not okay"))
  }     
  print (paste(sep="     ",i,round(y[,i],digit=3),round(mean(x[,i]),digit=3),v,round(s,digit=3),slower,supper))
}
----

Simulation s12 generates 10 repetitions of 10 replicates of a 71-block using
ClonalOrigin model. 
The three main parameters, recombinant edges, and a species tree were obtained
from cornellf/8. The cornellf/8 run used the minimum limit of 5,000 base pairs
for blocks. This resulted in 71 blocks. I sampled 101 recombinant trees, 10 of
which were used for the 10 repetitions. 
I wish to check how well the 100 simulations can recover the true numbers of
recombinant edges. 


receive-run-2nd-clonalorigin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Once jobs in the computing cluster are finished, select this command to receive
the results from the cluster. Choose SPECIES, REPETITION, and REPLICATE to
receive your runs from the cluster. It also ask a job ID, which is the job ID of
run-mauve directory. You can find it in the 2nd line of the mauve alignment
file:

.A sample mauve alignment file
----
output/cornellf/8/run-mauve/output/full_alignment.xmfa
----

.The 2nd line of the mauve alignment file
----
#Sequence1File  /tmp/1081728.scheduler.v4linux/input/CP002215.gbk
----

WARNING: receive-run-2nd-clonalorigin may be split into two parts. The first
part is to download the result, and the second part is to do something about it. 

scatter-plot-parameter
~~~~~~~~~~~~~~~~~~~~~~

compute-prior-count-recedge
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Compute the prior expected numbers of recombinant edges given a species tree.
The clonal origin's companion program called ``gui'' is used. 
Select your SPECIES, REPETITION, and REPLICATE to choose a proper run from which
you wish to compute the prior expected number of recombinant edges.
The program ``gui'' runs on each block. It reads in a ClonalOrigin XML output
file of the 2nd stage MCMC. For example, the following file is read in for
SPECIES=cornellf, REPETITION=8, and REPLICATE=2:

.ClonalOrigin XML file
----
output/cornellf/8/run-clonalorigin/output2/2/core_co.phase3.xml.1
----

.File of prior expected number of recombinant edges
----
output/cornellf/8/run-clonalorigin/output2/priorcount-2/1.txt
----

count-observed-recedge
~~~~~~~~~~~~~~~~~~~~~~
Only observed recombinant edges are considered.

compute-heatmap-recedge
~~~~~~~~~~~~~~~~~~~~~~~
Observed recombinant edges and the prior expected number of recombinant edges
both are considered.
Menu compute-prior-count-recedge must be called before the call of this menu.
 
map-tree-topology
~~~~~~~~~~~~~~~~~
A ClonalOrigin XML output file contains a list of recombinant trees. The number
of recombinant trees is equal to the the number of Iteration tags. A modified
program wargsim can parse a ClonalOrigin XML file with a single recombinant
tree. The ClonalOrigin XML output file with multiple recombinant trees have to
divided to multiple XML files, each of which contains a single recombinant tree.

.A ClonalOrigin XML output file: REPETITION=8, REPLICATE=2, BLOCK=1
----
output/cornellf/8/run-clonalorigin/output2/2/core_co.phase3.xml.1
----

Splitted ClonalOrigin XML files are stored in ri-# directory where # represents
REPLICATE.

.A ClonalOrigin XML output file with a single recombinant tree: REPETITION=8,
REPLICATE=2, BLOCK=1, ITERATION=1
----
output/cornellf/8/run-clonalorigin/output2/ri-2/core_co.phase3.xml.1.1
----

To each splitted ClonalOrigin XML file is wargsim applied. Each output file is
saved in ri-#-out directory where # represents REPLICATE.

.A gene tree topology file from a single recombinant tree: REPETITION=8,
REPLICATE=2, BLOCK=1, ITERATION=1
----
output/cornellf/8/run-clonalorigin/output2/ri-2-out/core_co.phase3.xml.1.1
----

Some of recombinant trees may not be processible by wargsim, or wargsim can
crash when parsing a ClonalOrigin XML file. I check if the number of tree
topology indices and the size of a block are equal. If they are not equal, they
should be removed in further analysis.

Conceptually divided posterior samples should be recombined. 

.A posterior sample of gene tree topology: REPETITION=8,
REPLICATE=2, BLOCK=1
----
output/cornellf/8/run-clonalorigin/output2/ri-2-combined/1
----

Gene 

.An ingene file is appended
----
output/cornellf/8/run-analysis/in.gene
----




SIMULATION3
~~~~~~~~~~~

Recombination intensity based on the average number of recombinant edge types
per site is tested.

analyze-run-clonalorigin2-simulation2
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Using a local computer with a single CPU I can analyze the result of menu
simulate-data-clonalorigin2. 

analyze-run-clonalorigin2-simulation2-prepare
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
A number of simulation replicates are analyzed by using a cluster.

convert-gff-ingene
~~~~~~~~~~~~~~~~~~
I use a gene annotation file that accompanies the genbank bacterial genome file.
NCBI's ftp directory called bacteria contains complete genomes of bacteria and
archiea. A genbank file could be used to locate genes in the genome of the
genbank file. I instead use a companion file called gff file to extract gene
locations.

.A genome annotation gff file
----
Streptococcus_pyogenes_MGAS315_uid57911/NC_004070.gff
----

Gene locations are stored an ingene file. The file has four columns that are
delimited by a tab: gene name, start position, end position, and gene strand.
An ingene file is created in run-analysis of a repetition directory.

.An ingene file
----
output/cornellf/8/run-analysis/in.gene
----

locate-gene-in-block
~~~~~~~~~~~~~~~~~~~~
All of the gene in an ingene file are mapped to block alignments that are used
in ClonalOrigin inference. Five more columns are appended to the ingene file:
block ID, start and end position of a gene in the block, gene length, and
proportions of gaps in the gene.

.An ingene file is appended
----
output/cornellf/8/run-analysis/in.gene
----

clonalorigin2-simulation3
~~~~~~~~~~~~~~~~~~~~~~~~~
I wish to check how map of tree topology can be helpful. 

I can still use the previous
simulation, or s10, s11, and s13. I assume that a gene is 1,000 base pairs
long. I compute recombination intensity for regions of 1,000 base pairs long.
For simulation s10 and s11 I would have 10 regions of 1,000 base pairs long
for a block. For s13 I would use genes from the real data, or genes of M3
strains. I might have to use the cluster because the computation of
recombination intensity appears slow.

clonalorigin2-simulation3-prepare
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The simulation for map-tree-topology is done in a cluster.

clonalorigin2-simulation3-each-block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Menu clonalorigin2-simulation3-prepare,
clonalorigin2-simulation3-receive, and 
clonalorigin2-simulation3-analyze may not be successful in analyzing a sequence
alignment. Local genes trees from the sample using ClonalOrigin may be invalid.
Among numerous simulations there are several cases of block alignments where
this happens. In this case I have redo the simulation for those blocks. I need
SPECIES, REPETITION, REPLICATE, BLOCK, and BLOCKSIZE. After this correction, I
can proceed with clonalorigin2-simulation3-analyze.

recombination-intensity1-genes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The number of recombinant edges per site is computed for all of the genes of a
reference genome.
recombination-intensity1-map must be called before the call of this menu.

list-gene-go
~~~~~~~~~~~~
Melissa provided a file of gene ontology terms and their descriptions,
SpyMGAS315_go_category_names.txt,
and a file of gene names and their association with multiple gene ontology
terms,
SpyMGAS315_go_bacteria.txt. Using these files we list genes and their product
names for a given gene ontology term.

probability-recedge-gene
~~~~~~~~~~~~~~~~~~~~~~~~
Posterior probability of recombination is computed for each gene and each
recombinant edge type.

Terms
-----
block: a multiple alignment.

Manual or user guide
--------------------
A cover page
A title page and copyright page
A preface, containing details of related documents and information on how to
navigate the user guide
A contents page
A guide on how to use at least the main functions of the system
A troubleshooting section detailing possible errors or problems that may occur,
along with how to fix them
A FAQ (Frequently Asked Questions)
Where to find further help, and contact details
A glossary and, for larger documents, an index
