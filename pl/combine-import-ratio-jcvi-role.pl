#!/usr/bin/perl

#===============================================================================
#   Author: Sang Chul Choi, BSCB @ Cornell University, NY
#
#   File: combine-import-ratio-jcvi-role.pl
#   Date: 2011-02-25
#   Version: 1.0.0
#
#   Usage:
#      perl combine-import-ratio-jcvi-role.pl [options]
#
#      Try 'perl combine-import-ratio-jcvi-role.pl -h' for more information.
#
#   Purpose: combine-import-ratio-jcvi-role.pl help you to find gene ontologies and
#            JCVI roles of locus tags of S. pyogenes M3 strain.
#
#   Note that I started to code this based on PRINSEQ by Robert SCHMIEDER at
#   Computational Science Research Center @ SDSU, CA as a template. Some of
#   words are his not mine, and credit should be given to him. 
#===============================================================================

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use File::Temp qw(tempfile);
use XML::Parser;

$| = 1; # Do not buffer output

my $VERSION = 'combine-import-ratio-jcvi-role.pl 1.0.0';

my $man = 0;
my $help = 0;
my $perblock = 0;
my %params = ('help' => \$help, 'h' => \$help, 'man' => \$man, 'perblock' => \$perblock);        
GetOptions( \%params,
            'help|h',
            'man',
            'verbose',
            'version' => sub { print $VERSION."\n"; exit; },
            'importRatio=s',
            'jcviRole=s'
            ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

=head1 NAME

combine-import-ratio-jcvi-role.pl - Combine import ratio and jcvi role files.

=head1 VERSION

combine-import-ratio-jcvi-role.pl 1.0.0

=head1 SYNOPSIS

perl combine-import-ratio-jcvi-role.pl.pl [-h] [-help] [-version] [-man] [-verbose] 
  [-importRatio import_ratio_file]
  [-jcviRole jcvi_role_file]

=head1 DESCRIPTION

combine-import-ratio-jcvi-role.pl help you to combine import ratio and jcvi role
files.

=head1 OPTIONS

=over 8

=item B<-help> | B<-h>

Print the help message; ignore other arguments.

=item B<-man>

Print the full documentation; ignore other arguments.

=item B<-version>

Print program version; ignore other arguments.

=item B<-verbose>

Prints status and info messages during processing.

=item B<***** INPUT OPTIONS *****>

=item B<-importRatio> <file>

An import ratio file contains a list of genes with their corresponding values.

=item B<-jcviRole> <file>

A JCVI role file is generated by
list-locus-tag-go-jcvi-role.pl

=back

=head1 AUTHOR

Sang Chul Choi, C<< <goshng_at_yahoo_dot_co_dot_kr> >>

=head1 BUGS

If you find a bug please post a message rnaseq_analysis project at codaset dot
com repository so that I can make combine-import-ratio-jcvi-role.pl better.

=head1 COPYRIGHT

Copyright (C) 2011  Sang Chul Choi

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

################################################################
# Input command options
################################################################

my $importRatioFilename;
my $jcviRoleFilename;
if (exists $params{importRatio})
{
  $importRatioFilename = $params{importRatio};
} else {
  &printError("you did not specify an import ratio file");
}

if (exists $params{jcviRole})
{
  $jcviRoleFilename = $params{jcviRole};
} else {
  &printError("you did not specify an JCVI role file");
}

################################################################
# Main
################################################################

sub get_gene_with_categories ($);
sub get_gene_with_values ($);
sub get_categories ($);

# A list of genes with their categories.
my %genesWithCategories = get_gene_with_categories ($jcviRoleFilename);
# A list of genes with their values.
my %genesWithValues = get_gene_with_values ($importRatioFilename);
# A list of unique categories.
my @categories = get_categories (\%genesWithCategories);

foreach my $gene (keys %genesWithValues)
{
  for my $category (@categories)
  {
    my $found = 'FALSE';
    for my $c (@{$genesWithCategories{$gene}})
    {
      if ($category eq $c)
      {
        $found = 'TRUE';
        last;
      }
    } 
    push @{$genesWithValues{$gene}}, $found;
  }
}

print "gene\tstart\tend\tblock\tblockstart\tblockend\tv\tw\tsdestart";
for my $category (@categories)
{
  print "\t$category";
}
print "\n";
foreach my $gene (keys %genesWithValues)
{
  print $gene, "\t";
  print join ("\t", @{$genesWithValues{$gene}});
  print "\n";
}

exit;

#################################################################################
### Main FUNCTIONS
#################################################################################

sub get_gene_with_categories ($)
{
  my ($f) = @_;
  my %r;
  open JCVIROLE, $f or die "$f: $!";
  while (<JCVIROLE>)
  {
    chomp;
    my @elements = split /;/;
    my $lastElementIndex = $#elements;
    $r{$elements[0]} = [ @elements[1..$lastElementIndex] ];
  }
  close (JCVIROLE);
  return %r;
}

sub get_gene_with_values ($)
{
  my ($f) = @_;
  my %r;
  open GENEVALUE, $f or die "$f: $!";
  while (<GENEVALUE>)
  {
    chomp;
    my @elements = split /\s+/;
    my $lastElementIndex = $#elements;
    $r{$elements[0]} = [ @elements[1..$lastElementIndex] ];
  }
  close (GENEVALUE);
  return %r;
}

sub get_categories ($)
{
  my ($hash) = @_;
  my @list;
  foreach my $key (keys %$hash) 
  {
    push @list, @{$hash->{$key}}; 
  }
  my %seen = (); my @uniqu = grep { ! $seen{$_} ++ } @list; 

  #for my $role (@uniqu)
  #{
  #  print $role, "\n";
  #}
  #print "\n";
  return @uniqu;
}


##
#################################################################################
### MISC FUNCTIONS
#################################################################################
##

sub printError {
    my $msg = shift;
    print STDERR "ERROR: ".$msg.".\n\nTry \'combine-import-ratio-jcvi-role.pl -h\' for more information.\nExit program.\n";
    exit(0);
}

sub getLineNumber {
    my $file = shift;
    my $lines = 0;
    open(FILE,"perl -p -e 's/\r/\n/g' < $file |") or die "ERROR: Could not open file $file: $! \n";
    $lines += tr/\n/\n/ while sysread(FILE, $_, 2 ** 16);
    close(FILE);
    return $lines;
}


sub checkFileFormat {
    my $file = shift;

    open(FILE,"perl -p -e 's/\r/\n/g' < $file |") or die "ERROR: Could not open file $file: $! \n";
    while (<FILE>) {
    }
    close(FILE);

    my $format = 'map';
    return $format;
}

