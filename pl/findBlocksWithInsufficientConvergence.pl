#!/usr/bin/perl

#===============================================================================
#   Author: Sang Chul Choi, BSCB @ Cornell University, NY
#
#   File: findBlocksWithInsufficientConvergence.pl
#   Date: 2011-02-10
#   Version: 0.1.0
#
#   Usage:
#      perl findBlocksWithInsufficientConvergence.pl [options]
#
#      Try 'perl findBlocksWithInsufficientConvergence.pl -h' for more information.
#
#   Purpose: findBlocksWithInsufficientConvergence.pl help you find blocks 
#            with insufficient convergence.
#
#   Note that I started to code this based on PRINSEQ by Robert SCHMIEDER at
#   Computational Science Research Center @ SDSU, CA as a template. Some of
#   words are his not mine, and credit should be given to him. 
#===============================================================================

use strict;
use warnings;

use Getopt::Long;
use Pod::Usage;
use File::Temp qw(tempfile);

$| = 1; # Do not buffer output

my $VERSION = 'findBlocksWithInsufficientConvergence.pl 0.1.0';

my $man = 0;
my $help = 0;
my %params = ('help' => \$help, 'h' => \$help, 'man' => \$man);        
GetOptions( \%params,
            'help|h',
            'man',
            'verbose',
            'version' => sub { print $VERSION."\n"; exit; },
            'in=s'
            ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

=head1 NAME

findBlocksWithInsufficientConvergence.pl - Find blocks with insufficient convergence

=head1 VERSION

findBlocksWithInsufficientConvergence.pl 0.1.0

=head1 SYNOPSIS

perl findBlocksWithInsufficientConvergence.pl [-h] [-help] [-version] [-in input_file] 

=head1 DESCRIPTION

Clonal Origin's GUI is used to compute Gelman-Rubin's test of convergence using
multiple independent chains. The output file from the program is used to find
blocks with insufficient convergence.

=head1 OPTIONS

=over 8

=item B<-help> | B<-h>

Print the help message; ignore other arguments.

=item B<-man>

Print the full documentation; ignore other arguments.

=item B<-version>

Print program version; ignore other arguments.

=item B<-verbose>

Prints status and info messages during processing.

=item B<***** INPUT OPTIONS *****>

=item B<-in> <file>

An input file is generated by Clonal Origin's GUI.

=back

=head1 AUTHOR

Sang Chul Choi, C<< <goshng_at_yahoo_dot_co_dot_kr> >>

=head1 BUGS

If you find a bug please post a message rnaseq_analysis project at codaset dot
com repository so that I can make findBlocksWithInsufficientConvergence.pl better.

=head1 COPYRIGHT

Copyright (C) 2011  Sang Chul Choi

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

my $infilename;

if (exists $params{in})
{
  $infilename = $params{in};
}
else
{
  &printError("you did not specify an input file");
}

#
################################################################################
## DATA PROCESSING
################################################################################
#

# Count multiple hits of a short read.
open FILE, "$infilename" or die "$!";
my $line = <FILE>;
while (<FILE>) {
   chomp();



   my @elements = split /\s+/;
   my $pos = $elements[0];
   # eto 0, efrom 3 index is 9 * eto + efrom + 1

   my $v = 0;
   my $to;
   my $from;
   my $j;
   for (my $i = 0; $i <= $#eto; $i++)
   {
     $to = $eto[$i];
     $from = $efrom[$i];
     $j = 9 * $to + $from + 1;
     if ($elements[$j] / $samplesize > 0.9) # Sample size is 101.
     {
       $v = 1;
     }
     else
     {
       $v = 0;
     }
   }
   if ($#eto == 0)
   {
     $v = $elements[$j] / $samplesize;
   }
   print $fhigb "$chromosomeName\t$pos\t$v\n";
}
close(FILE);
close($fhigb);

##
#################################################################################
### MISC FUNCTIONS
#################################################################################
##

sub printError {
    my $msg = shift;
    print STDERR "ERROR: ".$msg.".\n\nTry \'findBlocksWithInsufficientConvergence.pl -h\' for more information.\nExit program.\n";
    exit(0);
}

sub getLineNumber {
    my $file = shift;
    my $lines = 0;
    open(FILE,"perl -p -e 's/\r/\n/g' < $file |") or die "ERROR: Could not open file $file: $! \n";
    $lines += tr/\n/\n/ while sysread(FILE, $_, 2 ** 16);
    close(FILE);
    return $lines;
}


sub checkFileFormat {
    my $file = shift;

    open(FILE,"perl -p -e 's/\r/\n/g' < $file |") or die "ERROR: Could not open file $file: $! \n";
    while (<FILE>) {
    }
    close(FILE);

    my $format = 'map';
    return $format;
}

