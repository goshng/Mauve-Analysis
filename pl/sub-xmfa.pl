=head1 NAME

sub-xmfa.pl

=head1 VERSION

v1.0, Sun May 15 18:11:38 EDT 2011

=head1 DESCRIPTION

An XMFA file is a version of FASTA format file. It is generated by a sequence
alignment called mauve. The header of a sequence starts with a bracket `>' and
includes the index of a sequence and positions in the genome. The following is
an exmaple.

  > 1:3424-8780 + /tmp/1081728.scheduler.v4linux/input/CP002215.gbk

=head1 FUNCTIONS

=over 4

=item sub locateBlockGenome ($$)

  Argument 1: XMFA file name
  Argument 2: Index of a sequence
  Return: an array of start position, end poisition, and its strand

=item sub locateNucleotideBlock ($$)

  Argument 1: XMFA file name
  Argument 2: Index of a sequence
  Return: the sequence in PERL array

=back

=head1 AUTHOR

Sang Chul Choi, C<< <goshng_at_yahoo_dot_co_dot_kr> >>

=head1 COPYRIGHT

Copyright (C) 2011 Sang Chul Choi

=head1 LICENSE

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

sub locateBlockGenome ($$)
{
  my ($f, $r) = @_;
  my $startGenome;
  my $endGenome;
  my $strand;

  open XMFA, $f or die "Could not open $f $!";
  while (<XMFA>)
  {
    chomp; 
    if (/^>\s+$r:(\d+)-(\d+)\s+([+-])/)
    {
      $startGenome = $1;
      $endGenome = $2;
      $strand = $3;
      last;
    }
  }
  close XMFA;
  return ($startGenome, $endGenome, $strand);
}

sub getMidPosition ($)
{
  my ($f) = @_;
  my $v;
  open XMFA, $f or die $!;
  while (<XMFA>) {
    if (/^>\s+(\d+):(\d+)-(\d+)/) {
      die "$1 is not 1" unless $1 == 1;
      $v = ($2 + $3)/2;
      last;
    }
  }
  close XMFA;
  return $v;
}

sub locateNucleotideBlock ($$)
{
  my ($f, $r) = @_;
  my @v;
  my $startGenome;
  my $endGenome;
  my $line;
  my $sequence = "";
  my $geneSequence = "";
  my $strand;
  open XMFA, $f or die "Could not open $f";
  while ($line = <XMFA>)
  {
    chomp $line;
    if ($line =~ /^>\s+$r:(\d+)-(\d+)\s+([+-])/)
    {
      $startGenome = $1;
      $endGenome = $2;
      $strand = $3;
      last;
    }
  }
  while ($line = <XMFA>)
  {
    chomp $line;
    if ($line =~ /^>/)
    {
      last;
    }
    $sequence .= $line;
  }
  close XMFA;

  my @nucleotides = split //, $sequence;
  return @nucleotides;
}

sub xmfaLengthBlock ($)
{
  my ($f) = @_;
  my $line;
  my $sequence = "";
  open XMFA, $f or die "Could not open $f $!";
  while ($line = <XMFA>)
  {
    chomp $line;
    next if $line =~ /^#/;
    last if $line =~ /^>/;
  }
  while ($line = <XMFA>)
  {
    chomp $line;
    if ($line =~ /^>/)
    {
      last;
    }
    $sequence .= $line; 
  }
  close (XMFA);
  return length($sequence);
}

sub xmfaLengthAllBlock ($)
{
  my ($f) = @_;
  my $line;
  my $sequence = "";
  open XMFA, $f or die "Could not open $f $!";
  while ($line = <XMFA>)
  {
    chomp $line;
    next if $line =~ /^#/;
    if ($line =~ /^>/)
    {
      while ($line = <XMFA>)
      {
        chomp $line;
        if ($line =~ /^>/)
        {
          last;
        }
        $sequence .= $line; 
      }

      while ($line = <XMFA>)
      {
        chomp $line;
        last if $line =~ /^=/;
      }
    }
  }
  close (XMFA);
  return length($sequence);
}

sub xmfaNumberBlock ($)
{
  my ($f) = @_;
  my $line;
  my $c = 0;
  open XMFA, $f or die "Could not open $f $!";
  while ($line = <XMFA>)
  {
    if ($line =~ /^=/)
    {
      $c++;
    }
  }
  return $c;
}

sub xmfaBlockSize ($)
{
  my ($f) = @_;
  my $line;
  my $blockSize = "";
  my $sequence = "";
  open XMFA, $f or die "Could not open $f $!";
  while ($line = <XMFA>)
  {
    chomp $line;
    next if $line =~ /^#/;
    if ($line =~ /^>/)
    {
      while ($line = <XMFA>)
      {
        chomp $line;
        if ($line =~ /^>/)
        {
          last;
        }
        $sequence .= $line; 
      }
      $blockSize = sprintf ("%s %d", $blockSize, length($sequence));
      $sequence = "";

      while ($line = <XMFA>)
      {
        chomp $line;
        last if $line =~ /^=/;
      }
    }
  }
  close (XMFA);
  return $blockSize;
}
1;
