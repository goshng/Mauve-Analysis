#!/bin/bash

PMI_RANK=$1
JOBIDFILE=$2
LOCKFILE=$3
STATUSDIR=$4
MAXNODE=$5

# Create a rank to note that the current job is running
touch $STATUSDIR/$PMI_RANK

WHICHLINE=1
JOBID=0
LASTNODE=N

cd $TMPDIR

function hms
{
  s=$1
  h=$((s/3600))
  s=$((s-(h*3600)));
  m=$((s/60));
  s=$((s-(m*60)));
  printf "%02d:%02d:%02d\n" $h $m $s
}

function checkIfTheJobSuccessfullyFinished 
{
  # Check the exit code of the JOBID.
  # If the job is kill, then put JOBID back to jobidfile.
  OUTPUTFILE=${JOBID##* }
  
  FINISHEDOUTPUT=N
  if [ -e $OUTPUTFILE ]; then
    FINISHED=$(tail -n 1 $OUTPUTFILE)
    if [[ "$FINISHED" =~ "outputFile" ]]; then
      FINISHEDOUTPUT=Y
    fi
  fi
  if [ "$FINISHEDOUTPUT" == "Y" ]; then
    # The job is succesfully finished.
    END_TIME=`date +%s`
    ELAPSED=`expr $END_TIME - $START_TIME`
    # echo end-$JOBID
    hms $ELAPSED
  else
    # The job is not successfully finished.
    # Put the job command back to the jobidfile.
    while [ "$JOBID" != "" ]; do
      lockfile=$LOCKFILE
      if ( set -o noclobber; echo "$$" > "$lockfile") 2> /dev/null; then
        # BK: this will cause the lock file to be deleted 
        # in case of other exit
        trap 'rm -f "$lockfile"; exit $?' INT TERM

        # The critical section:
        # Write a line, and delete it.
        cp $JOBIDFILE $JOBIDFILE.temp 
        echo $JOBID >> $JOBIDFILE.temp
        mv $JOBIDFILE.temp $JOBIDFILE

        rm -f "$lockfile"
        trap - INT TERM
        # Let the job be finished.
        JOBID=""
      else
        sleep 5
      fi
    done
    rm -f $OUTPUTFILE
  fi
}

NUMJOBS=8

# Keep trying to read in jobidfile until the current node is the last one.
#while [ "$LASTNODE" == "N" ]; do
  # Read the filelock
  while [ "$JOBID" != "" ]; do
    lockfile=$LOCKFILE
    if ( set -o noclobber; echo "$$" > "$lockfile") 2> /dev/null; then
      # BK: this will cause the lock file to be deleted 
      # in case of other exit
      trap 'rm -f "$lockfile"; exit $?' INT TERM

      # The critical section:
      # Read a line, and delete it.
      read -r JOBID < ${JOBIDFILE}
      sed '1d' $JOBIDFILE > $JOBIDFILE.temp; 
      mv $JOBIDFILE.temp $JOBIDFILE

      rm -f "$lockfile"
      trap - INT TERM

      if [ "$JOBID" == "" ]; then
        echo "No more jobs in waiting nodes"
        # Check how many warg jobs.
        NUMJOBS=$(ps -ef|grep warg|wc -l)
      else
        START_TIME=`date +%s`
        $JOBID
        # Check if the job is finished successfully.
        checkIfTheJobSuccessfullyFinished
      fi
    else
      # echo "Failed to acquire lockfile: $lockfile." 
      JOBID=0
      sleep 5
      # echo "Retry to access $lockfile"
    fi
  done

  # Check if the current node is the last
  LASTNODE=Y
  for h in $(eval echo {$PBS_ARRAYID..$MAXNODE}); do
    echo "Rank $PMI_RANK: Checking the last node of $PBS_ARRAYID"
    if [ $PBS_ARRAYID -lt $h ]; then
      echo "Rank $PMI_RANK: Checking the directory $STATUSDIR/$h"
      if [ -d "$STATUSDIR/$h" ]; then
        LASTNODE=N
        echo "Rank $PMI_RANK: This is not last node"
      fi
    fi
  done
  echo "Rank $PMI_RANK: Last node=$LASTNODE"
  JOBID=0
#done

# Now, the current node is the last one.
# Run jobs on this node until there are at least 4 jobs.
JOBID=0
while [ "$JOBID" != "" ]; do
  lockfile=$LOCKFILE
  if ( set -o noclobber; echo "$$" > "$lockfile") 2> /dev/null; then
    # BK: this will cause the lock file to be deleted 
    # in case of other exit
    trap 'rm -f "$lockfile"; exit $?' INT TERM

    # The critical section:
    # Read a line, and delete it.
    read -r JOBID < ${JOBIDFILE}
    sed '1d' $JOBIDFILE > $JOBIDFILE.temp; 
    mv $JOBIDFILE.temp $JOBIDFILE

    rm -f "$lockfile"
    trap - INT TERM

    if [ "$JOBID" == "" ]; then
      echo "No more jobs in the last node"
      # Check how many warg jobs.
      NUMJOBS=$(ps -ef|grep warg|wc -l)
      if [ $NUMJOBS -lt 5 ]; then
        # Kill those jobs and put JOBID back to jobidfile.
        ps ax | grep warg | awk '{print $1}' | xargs -i kill {} 2&>/dev/null
      else
        JOBID=0
      fi
    else
      # echo begin-$JOBID
      START_TIME=`date +%s`
      $JOBID
      checkIfTheJobSuccessfullyFinished
    fi
  else
    # echo "Failed to acquire lockfile: $lockfile." 
    sleep 5
    # echo "Retry to access $lockfile"
  fi
done

# Wait for all of the jobs to be finished.
rm -f $STATUSDIR/$PMI_RANK
NUMSTATUS=$(ls -1 $STATUSDIR|wc -l)
while [ $NUMSTATUS -gt 0 ]; do
  # Kill those jobs and put JOBID back to jobidfile.
  if [ $NUMSTATUS -lt 8 ];
    ps ax | grep warg | awk '{print $1}' | xargs -i kill {} 2&>/dev/null
  fi
  NUMSTATUS=$(ls -1 $STATUSDIR|wc -l)
  # sleep 60
  sleep 5
done

